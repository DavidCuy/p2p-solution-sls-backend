AWSTemplateFormatVersion: "2010-09-09"
Description: Build a basic pipeline
Parameters:
  # Environment
  Environment:
    Type: String
    AllowedValues:
      - dev
      - qa
      - staging
      - prod
    Description: Environment name.
    Default: dev
  AppName:
    Type: String
    ConstraintDescription: "[a-z]+"
    Description: The project name.
    Default: "p2p-solution"
  # artifacts to deploy
  PrincipalTemplate:
    Type: String
    Description: Name of the main template in the project.
    Default: projectTemplate.json
  ArtifactName:
    Type: String
    Default: projectTemplate.zip
  # buckets
  BucketArtifactName:
    Type: String
    Default: "-"
  # network
  SubnetsIds:
    Type: AWS::SSM::Parameter::Value<String>
  SecurityGroup:
    Type: AWS::SSM::Parameter::Value<String>
  VpcId:
    Type: AWS::SSM::Parameter::Value<String>

  AllResources:
    Type: String
    Default: "*"
  AppVersion:
    Type: String
    Default: latest

Resources:
  # Parameters store.
  SSMAppVersion:
    Type: "AWS::SSM::Parameter"
    Properties:
      Name: !Sub "/${Environment}/${AppName}/app/version"
      Tier: Standard
      Type: String
      Value: !Ref AppVersion
  
  # Roles
  RoleCodePipeline:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Sub "${Environment}-${AppName}-Codepipeline-Role-sls"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codepipeline.amazonaws.com
            Action: "sts:AssumeRole"
      Path: /
      Policies:
        - PolicyName: !Sub >-
            ${Environment}-${AppName}-CodePipeline-Service-Role
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "iam:PassRole"
                Resource: !Ref AllResources
              - Effect: Allow
                Action:
                  - "ec2:*"
                  - "cloudwatch:*"
                  - "cloudformation:*"
                  - "rds:*"
                Resource: !Ref AllResources
              - Effect: Allow
                Action: "s3:*"
                Resource: !Sub "arn:aws:s3:::${BucketArtifactName}"
              - Effect: Allow
                Action: "s3:*"
                Resource: !Sub "arn:aws:s3:::${BucketArtifactName}/*"
  RoleCloudFormation:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Sub "${Environment}-${AppName}-CloudFormation-Role-sls"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - cloudformation.amazonaws.com
            Action: "sts:AssumeRole"
      Path: /
      Policies:
        - PolicyName: !Sub "${Environment}-${AppName}-CloudFormation-Policy"
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - "elasticfilesystem:*"
                  - "secretsmanager:*"
                  - "waf:*"
                  - "kms:*"
                  - "acm:*"
                  - "route53:*"
                  - "cloudfront:*"
                  - "cloudwatch:*"
                  - "wafv2:*"
                  - "appsync:*"
                  - "waf-regional:*"
                  - "dynamodb:*"
                  - "elasticloadbalancing:*"
                  - "states:*"
                  - "organizations:ListPoliciesForTarget"
                  - "organizations:ListRoots"
                  - "organizations:ListTargetsForPolicy"
                  - "apigateway:*"
                  - "organizations:DescribeAccount"
                  - "cloudformation:CreateChangeSet"
                  - "organizations:DescribePolicy"
                  - "organizations:ListChildren"
                  - "organizations:ListPolicies"
                  - "iam:*"
                  - "s3:*"
                  - "ssm:*"
                  - "organizations:DescribeOrganization"
                  - "codedeploy:*"
                  - "lambda:*"
                  - "organizations:DescribeOrganizationalUnit"
                  - "organizations:ListParents"
                  - "logs:*"
                  - "sqs:*"
                  - "ec2:*"
                  - "events:*"
                  - "synthetics:*"
                  - "cognito-identity:*"
                  - "cognito-idp:*"
                  - "amplify:*"
                  - "scheduler:*"
                  - "pipes:CreatePipe"
                  - "pipes:DeletePipe"
                  - "pipes:DescribePipe"
                  - "pipes:ListPipes"
                  - "pipes:StartPipe"
                  - "pipes:StopPipe"
                  - "pipes:ListTagsForResource"
                  - "pipes:TagResource"
                  - "pipes:UntagResource"
                  - "pipes:UpdatePipe"
                  - "schemas:*"
                  - "elasticache:*"
                Resource: !Ref AllResources
            Version: 2012-10-17
        - PolicyName: !Sub "${Environment}-${AppName}-CloudFormation-CDLayer-Policy"
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - "lambda:*"
                Resource: !Sub '{{resolve:ssm:/${Environment}/${AppName}/customer-data/layer/arn}}'
            Version: 2012-10-17

  # Pipeline
  PipelineEventRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action: 'sts:AssumeRole'
            Principal:
              Service:
                - events.amazonaws.com
      Path: /
      Policies:
        -
          PolicyName: !Sub '${Environment}-${AppName}-eb-pipeline-execution-role'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: codepipeline:StartPipelineExecution
                Resource: !Join [ '', [ 'arn:aws:codepipeline:', !Ref 'AWS::Region', ':', !Ref 'AWS::AccountId', ':', !Ref Pipeline ] ]

  Pipeline:
    Type: "AWS::CodePipeline::Pipeline"
    Properties:
      Name: !Sub "${Environment}-${AppName}-pipeline"
      RoleArn: !GetAtt
        - RoleCodePipeline
        - Arn
      Stages:
        - Name: Source
          Actions:
            - Name: !Sub "Source${AppName}"
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: 1
                Provider: S3
              OutputArtifacts:
                - Name: SourceOutput
              Configuration:
                S3Bucket: !Ref BucketArtifactName
                S3ObjectKey: !Sub "deploys/${AppName}/${ArtifactName}"
                PollForSourceChanges: false
              RunOrder: 1
        - Name: Deploy
          Actions:
            - Name: CreateChangeSet
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: 1
                Provider: CloudFormation
              Configuration:
                ActionMode: CHANGE_SET_REPLACE
                ChangeSetName: !Sub "${Environment}-${AppName}-changeSet"
                StackName: !Sub "${Environment}-${AppName}-stack"
                Capabilities: "CAPABILITY_IAM,CAPABILITY_NAMED_IAM,CAPABILITY_AUTO_EXPAND"
                TemplatePath: !Join
                  - "::"
                  - - SourceOutput
                    - !Ref PrincipalTemplate
                RoleArn: !GetAtt
                  - RoleCloudFormationR
                  - Arn
                ParameterOverrides: !Sub '{"Environment": "${Environment}", "ArtifactsBucket": "${BucketArtifactName}", "SubnetsIds": "${SubnetsIds}", "SecurityGroup": "${SecurityGroup}", "VpcId": "${VpcId}"}'
              RunOrder: 1
              InputArtifacts:
                - Name: SourceOutput
            - Name: ChangesetExcecute
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: 1
                Provider: CloudFormation
              Configuration:
                ActionMode: CHANGE_SET_EXECUTE
                ChangeSetName: !Sub "${Environment}-${AppName}-changeSet"
                StackName: !Sub "${Environment}-${AppName}-stack"
              RunOrder: 2
              InputArtifacts:
                - Name: SourceOutput
      ArtifactStore:
        Type: S3
        Location: !Ref BucketArtifactName

  PipelineEventRule:
    Type: AWS::Events::Rule
    Properties:
      EventPattern:
        source:
          - aws.s3
        resources:
          - !Sub "arn:aws:s3:::${BucketArtifactName}"
        detail:
          object:
            key:
              - !Sub "deploys/${AppName}/${ArtifactName}"
          reason:
            - PutObject
            - CompleteMultipartUpload
      Targets:
        -
          Arn:
            !Join [ '', [ 'arn:aws:codepipeline:', !Ref 'AWS::Region', ':', !Ref 'AWS::AccountId', ':', !Ref Pipeline ] ]
          RoleArn: !GetAtt PipelineEventRole.Arn
          Id: !Sub '${Environment}-${AppName}-codepipeline-event-fire'
