name: Inner Deploy Workflow

on:
  push:
    branches:
      - main

permissions:
  id-token: write
  contents: read     

jobs:
  set_variables:
    name: "Set Environment Variables"
    runs-on: ubuntu-latest
    outputs:
      environment: dev
      app_version: latest
      
  build:
    name: "Build - ${{ needs.set_variables.outputs.environment }}"
    runs-on: ubuntu-latest
    needs: set_variables
    steps:
      - name: "Checkout"
        uses: actions/checkout@v2
        with:
          fetch-depth: 0 # Shallow clones should be disabled for a better relevancy of analysis
      - name: Set up Python 3.11
        uses: actions/setup-python@v2
        with:
          python-version: "3.11"
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          apm project install
          sudo apt-get install zip
      - name: Compile Project
        run: |
          apm project synth
          python reduce_layers_sizes.py
          zip -r context-${{ needs.set_variables.outputs.environment }} src templates
      - name: Upload Artifact to Deploy Job
        uses: actions/upload-artifact@v3
        with:
          name: artifact
          path: context-${{ needs.set_variables.outputs.environment }}.zip

  deploy_pipelines:
    name: "Deploy - builder-pipeline ${{ needs.set_variables.outputs.environment }}"
    needs: [ set_variables, build ]
    runs-on: ubuntu-latest
    environment: ${{ needs.set_variables.outputs.environment }}
    env:
      ENVIRONMENT: ${{ needs.set_variables.outputs.environment }}
      BUCKET: ${{ secrets.DEV_DEPLOYMENT_BUCKET }}
      APP_VERSION: "${{ needs.set_variables.outputs.app_version }}"
    steps:
      - name: Set environment variables
        run: |
          if [[ -z "$MTS_CONNECTOR_SECOND_APIKEY" ]]; then
            echo "MTS_CONNECTOR_SECOND_APIKEY=-" >> "$GITHUB_ENV"
          fi
      - name: "Checkout"
        uses: actions/checkout@v2
        with:
          fetch-depth: 0 # Shallow clones should be disabled for a better relevancy of analysis
      - uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.DEV_AWS_ROLE_TO_ASSUME }}
          role-session-name: p2p-solution-session-name
          aws-region: ${{ secrets.DEV_AWS_REGION }}
      - name: Deploy Pipeline
        run: |
          aws s3 cp psycopg2.zip s3://$BUCKET/deploys/psycopg2-311.zip
          aws cloudformation package --template-file ./templates/pipelines/pipeline-builder.yml --s3-bucket $BUCKET --s3-prefix deploys/p2p-solution --output-template-file ./templates/pipelines/pipeline-builder.yml
          aws cloudformation deploy --template-file ./templates/pipelines/pipeline-builder.yml --stack-name $ENVIRONMENT-p2p-solution-pipelines --parameter-overrides Environment=$ENVIRONMENT AppName=p2p-solution AppVersion=$APP_VERSION --capabilities CAPABILITY_AUTO_EXPAND CAPABILITY_NAMED_IAM CAPABILITY_IAM

  deploy:
    name: "Deploy - ${{ needs.set_variables.outputs.environment }}"
    needs: [ set_variables, deploy_pipelines ]
    environment: ${{ needs.set_variables.outputs.environment }}
    runs-on: ubuntu-latest
    env:
      BUCKET: ${{ secrets.DEV_DEPLOYMENT_BUCKET }}
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.DEV_AWS_ROLE_TO_ASSUME }}
          role-session-name: p2p-solution-deploy
          aws-region: ${{ secrets.DEV_AWS_REGION }}
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Download Artifact from Build Job
        uses: actions/download-artifact@v3
        with:
          name: artifact
      - name: Unpacking Artifact
        run: |
          sudo apt install zip unzip
          unzip  -o  context-${{ needs.set_variables.outputs.environment }}.zip
      - name: Deploy Project
        run: |
          for t in $(find ./templates -not -path "./templates/pipelines/*" -name '*.yaml' -or -name '*.json' -and -not -name '*.asl.*');
            do
              aws cloudformation package --template-file $t --s3-bucket $BUCKET --output-template-file $t --s3-prefix deploys/p2p-solution/
              if [ "${t}" != "./templates/projectTemplate.json" ]
              then
                  sub_path=${t#"./templates/"}
                  aws s3 cp $t s3://$BUCKET/deploys/p2p-solution/$sub_path
              fi
            done
          
          cd templates
          zip -r projectTemplate.zip ./projectTemplate.json
          aws s3 cp projectTemplate.zip s3://$BUCKET/deploys/p2p-solution/projectTemplate.zip
